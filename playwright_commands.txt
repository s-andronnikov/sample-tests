---------------------------------
host_url: http://localhost:3000/
Can you add test for Configurations Company page. URL is {host_url}/depreciation/{depr_case_id}/configurations/company.
All tests should use AI instructions, project context for UI tests and existed tests as an example.
Use correct forders naming for tests, pages and components based on chat instructions.
Use Playwright MCP service to interact with browser and get the pages contexts.
Main content locator is Element(By.LOCATOR, ".page-container .configurations")
For defining URL use `common/routes.py` and `ui/helpers/url_helper.py`
as and example use ui/tests/tax_depreciation/test_bonus_profile_configurations.py

Cower following actions by tests:

1. Test Main Company page
  - Should be loaded successfully:
     - Should have title "Company"
     - Active "Create" button
     - Ag-grid grid with following headers (Build static list from headers from page snapshot)

2. Test Create Company
  - Main Company page should have active "Create" button
  - Clicking on it should open form component with following elements:
     - Title is "Create Company"
     - Input field with "Name" title
     - Dropdown element with "Closing Frequency" title
     - Regulated checkbox (should be off by default)
     - Tags dropdown
     - Actions buttons
       - "Cancel" - should be enabled
       - "Create" - should be disabled
  - Fill form. Keep all form data to verify saved item.
     - Name: fake title with "!" on beginning to have new item first in list sorting by name
     - Closing Frequency: first item from possible options. You need to click on this element first to see dropdown options.
     - Regulated: should be on
     - Tags: first item from possible options. You need to click on this element first to see dropdown options.
      And then click to form container to apply selected item
  - Action button "Create" should became enabled (have no class "disabled")
  - Click "Create" button
  - Form should disappear
  - Verify created item on Companies list grid
    - Order grid by name by clicking on "Name" grid header. Near "Name" should appear sort indicator with asc icon
    - Get the first item on grid.
    - Verify Item data with entered form data based on form elements and grid header names. All data should be the same.

3. Test Edit Item
  - List grid should have first item (row)
  - Click on the first row. Collect Item data from grid row.
  - Actions icons in "Actions" cell should became visible.
  - Click on edit (pencil) icon.
  - Form component should appear on page with following:
    - Form title is "Edit {Name}" - Where {Name} is the selected item "Name"
    - "Name" input should have selected item "Name"
    - "Closing Frequency" value should be equal Closing Frequency of selected item
    - "Regulated" value should be equal Regulated value of selected item
    - "Tags" value should be equal Tags value of selected item
    - Actions buttons
       - "Cancel" - should be enabled
       - "Save" - should be disabled
  - Change "Name" value by adding "!" on beginning. Keep new name to validate it.
  - "Save" action button should became enabled (have no class "disabled")
  - Click on "Save" button
  - Form should disappear
  - Verify edited item on Companies list grid
    - Order grid by name by clicking on "Name" grid header. Near "Name" should appear sort indicator with asc icon
    - Select first row item
    - Name of selected item should be the same as edited one

5. Test Copy Item
  - List grid should have first item (row)
  - Click on the first row. Collect Item data from grid row.
  - Actions icons in "Actions" cell should became visible.
  - Click on copy icon.
  - Form component should appear on page with following:
    - Form title is "Copying from {Name}" - Where {Name} is the selected item "Name"
    - "Name" input should have selected item "Name"
    - "Closing Frequency" value should be equal Closing Frequency of selected item
    - "Regulated" value should be equal Regulated value of selected item
    - "Tags" value should be equal Tags value of selected item
    - Actions buttons
       - "Cancel" - should be enabled
       - "Create" - should be disabled
  - Change "Name" value by adding "!" on beginning. Keep new name to validate it.
  - "Create" action button should became enabled (have no class "disabled")
  - Click on "Create" button
  - Form should disappear
  - Verify edited item on Companies list grid
    - Order grid by name by clicking on "Name" grid header. Near "Name" should appear sort indicator with asc icon
    - Select first row item
    - Name of selected item should be the same as edited one

6. Test delete item
  - List grid should have first item (row)
  - Click on the first row. Collect Item data from grid row.
  - Actions icons in "Actions" cell should became visible.
  - Click on delete (trash) icon.
  - Delete confirmation modal dialog (create page component for it) should appear with following elements:
    - Title "Delete Location [name of selected item]"
    - Content - "This action cannot be undone. Are you sure you want to delete this item?"
    - Action buttons "Cancel" and "Delete"
  - Click on "Delete" action button
  - Confirmation modal dialog should disappear
  - Verify deleting result
    - Selected item should not be in the grid list.

 ----------------------------------------


Steps:
 - Go to the Listing page  (`authenticated_asset_class_page.open_with_id(base_settings.depr_case_id)`)
 - Check that page is loaded and grip exists
 - Select first row from the grid
 - Do the hover action on "Actions" cell for selected row
 - On hover actions icons should appear and have a pencil for edit
 - Click on edit icon
 - We should see ".configurations-form-wrapper" toster with edit form inside (`form_container`)
 - <p class="title"> should have text "Edit " + text from cell of selected row and Name column
 - `name_input` should and have correct name in value
 - Change the name to "112" + prev name
 -  `action_button_save` should became active
 - Click to save button.
 - edit form should hide (`self.form_container.should_be_visible(should_visible=False)`)
 - Asset classes listing grid should have row with new name





------  DELETE
/browser_generate_playwright_test
Can you add step to test deletion of asset class
Steps:
 - Go to assets class list page (`setup_authenticated_page`)
 - Check that page is loaded (`setup_authenticated_page`)
 - Select first row from the asset classes list grid
 - Click on this row
 - Get the Name of this record
 - Click on delete icon (.trash) in Actions column
 - Delete action should open confirmation popup (.confirmation) with header (.header) "Delete Asset Class " + Name of record
 - This popup should have active "Delete" button.
 - Click on "Delete" button.
 - Check success result:
    - Confirmation popup should disappear
    - Should be shown toster message with text "Successfully Deleted"
    - Deleted record should disappear from the listing grid



can you create a new tests for the Depreciation profile page, url is http://localhost:3000/depreciation/9aa52b3f-f76d-438d-9557-92984bd9e1fc/configurations/depreciation-profile

1. Page load. Test should open the page and verify the following
  - Page loaded successfully
  - Page should have title "Depreciation Profiles"
  - Page should finish grid data loading
  - Page should have grid with following headers expected_headers = [
            "Name",
            "Profile Description",
            "Class Life",
            "Bonus Eligible",
            "Mid-Quarter Eligible",
            "Amortization",
            "Rate Type",
            "Method",
            "Convention",
            "Life",
            "Tags",
            "Actions"
        ]


